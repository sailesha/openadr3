# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClientCredentialRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, grant_type: str=None, client_id: str=None, client_secret: str=None, scope: str=None):  # noqa: E501
        """ClientCredentialRequest - a model defined in Swagger

        :param grant_type: The grant_type of this ClientCredentialRequest.  # noqa: E501
        :type grant_type: str
        :param client_id: The client_id of this ClientCredentialRequest.  # noqa: E501
        :type client_id: str
        :param client_secret: The client_secret of this ClientCredentialRequest.  # noqa: E501
        :type client_secret: str
        :param scope: The scope of this ClientCredentialRequest.  # noqa: E501
        :type scope: str
        """
        self.swagger_types = {
            'grant_type': str,
            'client_id': str,
            'client_secret': str,
            'scope': str
        }

        self.attribute_map = {
            'grant_type': 'grant_type',
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'scope': 'scope'
        }
        self._grant_type = grant_type
        self._client_id = client_id
        self._client_secret = client_secret
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt) -> 'ClientCredentialRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The clientCredentialRequest of this ClientCredentialRequest.  # noqa: E501
        :rtype: ClientCredentialRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grant_type(self) -> str:
        """Gets the grant_type of this ClientCredentialRequest.

        OAuth2 grant type, must be 'client_credentials'  # noqa: E501

        :return: The grant_type of this ClientCredentialRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type: str):
        """Sets the grant_type of this ClientCredentialRequest.

        OAuth2 grant type, must be 'client_credentials'  # noqa: E501

        :param grant_type: The grant_type of this ClientCredentialRequest.
        :type grant_type: str
        """
        allowed_values = ["client_credentials"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def client_id(self) -> str:
        """Gets the client_id of this ClientCredentialRequest.

        client ID to exchange for bearer token.  # noqa: E501

        :return: The client_id of this ClientCredentialRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this ClientCredentialRequest.

        client ID to exchange for bearer token.  # noqa: E501

        :param client_id: The client_id of this ClientCredentialRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self) -> str:
        """Gets the client_secret of this ClientCredentialRequest.

        client secret to exchange for bearer token.  # noqa: E501

        :return: The client_secret of this ClientCredentialRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret: str):
        """Sets the client_secret of this ClientCredentialRequest.

        client secret to exchange for bearer token.  # noqa: E501

        :param client_secret: The client_secret of this ClientCredentialRequest.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def scope(self) -> str:
        """Gets the scope of this ClientCredentialRequest.

        application defined scope.  # noqa: E501

        :return: The scope of this ClientCredentialRequest.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this ClientCredentialRequest.

        application defined scope.  # noqa: E501

        :param scope: The scope of this ClientCredentialRequest.
        :type scope: str
        """

        self._scope = scope

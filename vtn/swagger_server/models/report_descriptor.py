# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.values_map import ValuesMap  # noqa: F401,E501
from swagger_server import util


class ReportDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, payload_type: str=None, reading_type: str=None, units: str=None, targets: List[ValuesMap]=None, aggregate: bool=False, start_interval: int=-1, num_intervals: int=-1, historical: bool=True, frequency: int=-1, repeat: int=1):  # noqa: E501
        """ReportDescriptor - a model defined in Swagger

        :param payload_type: The payload_type of this ReportDescriptor.  # noqa: E501
        :type payload_type: str
        :param reading_type: The reading_type of this ReportDescriptor.  # noqa: E501
        :type reading_type: str
        :param units: The units of this ReportDescriptor.  # noqa: E501
        :type units: str
        :param targets: The targets of this ReportDescriptor.  # noqa: E501
        :type targets: List[ValuesMap]
        :param aggregate: The aggregate of this ReportDescriptor.  # noqa: E501
        :type aggregate: bool
        :param start_interval: The start_interval of this ReportDescriptor.  # noqa: E501
        :type start_interval: int
        :param num_intervals: The num_intervals of this ReportDescriptor.  # noqa: E501
        :type num_intervals: int
        :param historical: The historical of this ReportDescriptor.  # noqa: E501
        :type historical: bool
        :param frequency: The frequency of this ReportDescriptor.  # noqa: E501
        :type frequency: int
        :param repeat: The repeat of this ReportDescriptor.  # noqa: E501
        :type repeat: int
        """
        self.swagger_types = {
            'payload_type': str,
            'reading_type': str,
            'units': str,
            'targets': List[ValuesMap],
            'aggregate': bool,
            'start_interval': int,
            'num_intervals': int,
            'historical': bool,
            'frequency': int,
            'repeat': int
        }

        self.attribute_map = {
            'payload_type': 'payloadType',
            'reading_type': 'readingType',
            'units': 'units',
            'targets': 'targets',
            'aggregate': 'aggregate',
            'start_interval': 'startInterval',
            'num_intervals': 'numIntervals',
            'historical': 'historical',
            'frequency': 'frequency',
            'repeat': 'repeat'
        }
        self._payload_type = payload_type
        self._reading_type = reading_type
        self._units = units
        self._targets = targets
        self._aggregate = aggregate
        self._start_interval = start_interval
        self._num_intervals = num_intervals
        self._historical = historical
        self._frequency = frequency
        self._repeat = repeat

    @classmethod
    def from_dict(cls, dikt) -> 'ReportDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The reportDescriptor of this ReportDescriptor.  # noqa: E501
        :rtype: ReportDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload_type(self) -> str:
        """Gets the payload_type of this ReportDescriptor.

        Enumerated or private string signifying the nature of values.  # noqa: E501

        :return: The payload_type of this ReportDescriptor.
        :rtype: str
        """
        return self._payload_type

    @payload_type.setter
    def payload_type(self, payload_type: str):
        """Sets the payload_type of this ReportDescriptor.

        Enumerated or private string signifying the nature of values.  # noqa: E501

        :param payload_type: The payload_type of this ReportDescriptor.
        :type payload_type: str
        """
        if payload_type is None:
            raise ValueError("Invalid value for `payload_type`, must not be `None`")  # noqa: E501

        self._payload_type = payload_type

    @property
    def reading_type(self) -> str:
        """Gets the reading_type of this ReportDescriptor.

        Enumerated or private string signifying the type of reading.  # noqa: E501

        :return: The reading_type of this ReportDescriptor.
        :rtype: str
        """
        return self._reading_type

    @reading_type.setter
    def reading_type(self, reading_type: str):
        """Sets the reading_type of this ReportDescriptor.

        Enumerated or private string signifying the type of reading.  # noqa: E501

        :param reading_type: The reading_type of this ReportDescriptor.
        :type reading_type: str
        """

        self._reading_type = reading_type

    @property
    def units(self) -> str:
        """Gets the units of this ReportDescriptor.

        Units of measure.  # noqa: E501

        :return: The units of this ReportDescriptor.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units: str):
        """Sets the units of this ReportDescriptor.

        Units of measure.  # noqa: E501

        :param units: The units of this ReportDescriptor.
        :type units: str
        """

        self._units = units

    @property
    def targets(self) -> List[ValuesMap]:
        """Gets the targets of this ReportDescriptor.

        A list of valuesMap objects.  # noqa: E501

        :return: The targets of this ReportDescriptor.
        :rtype: List[ValuesMap]
        """
        return self._targets

    @targets.setter
    def targets(self, targets: List[ValuesMap]):
        """Sets the targets of this ReportDescriptor.

        A list of valuesMap objects.  # noqa: E501

        :param targets: The targets of this ReportDescriptor.
        :type targets: List[ValuesMap]
        """

        self._targets = targets

    @property
    def aggregate(self) -> bool:
        """Gets the aggregate of this ReportDescriptor.

        True if report should aggregate results from all targeted resources. False if report includes results for each resource.   # noqa: E501

        :return: The aggregate of this ReportDescriptor.
        :rtype: bool
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate: bool):
        """Sets the aggregate of this ReportDescriptor.

        True if report should aggregate results from all targeted resources. False if report includes results for each resource.   # noqa: E501

        :param aggregate: The aggregate of this ReportDescriptor.
        :type aggregate: bool
        """

        self._aggregate = aggregate

    @property
    def start_interval(self) -> int:
        """Gets the start_interval of this ReportDescriptor.

        The interval on which to generate a report. -1 indicates generate report at end of last interval.   # noqa: E501

        :return: The start_interval of this ReportDescriptor.
        :rtype: int
        """
        return self._start_interval

    @start_interval.setter
    def start_interval(self, start_interval: int):
        """Sets the start_interval of this ReportDescriptor.

        The interval on which to generate a report. -1 indicates generate report at end of last interval.   # noqa: E501

        :param start_interval: The start_interval of this ReportDescriptor.
        :type start_interval: int
        """

        self._start_interval = start_interval

    @property
    def num_intervals(self) -> int:
        """Gets the num_intervals of this ReportDescriptor.

        The number of intervals to include in a report. -1 indicates that all intervals are to be included.   # noqa: E501

        :return: The num_intervals of this ReportDescriptor.
        :rtype: int
        """
        return self._num_intervals

    @num_intervals.setter
    def num_intervals(self, num_intervals: int):
        """Sets the num_intervals of this ReportDescriptor.

        The number of intervals to include in a report. -1 indicates that all intervals are to be included.   # noqa: E501

        :param num_intervals: The num_intervals of this ReportDescriptor.
        :type num_intervals: int
        """

        self._num_intervals = num_intervals

    @property
    def historical(self) -> bool:
        """Gets the historical of this ReportDescriptor.

        True indicates report on intervals preceding startInterval. False indicates report on intervals following startInterval (e.g. forecast).   # noqa: E501

        :return: The historical of this ReportDescriptor.
        :rtype: bool
        """
        return self._historical

    @historical.setter
    def historical(self, historical: bool):
        """Sets the historical of this ReportDescriptor.

        True indicates report on intervals preceding startInterval. False indicates report on intervals following startInterval (e.g. forecast).   # noqa: E501

        :param historical: The historical of this ReportDescriptor.
        :type historical: bool
        """

        self._historical = historical

    @property
    def frequency(self) -> int:
        """Gets the frequency of this ReportDescriptor.

        Number of intervals that elapse between reports. -1 indicates same as numIntervals.   # noqa: E501

        :return: The frequency of this ReportDescriptor.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: int):
        """Sets the frequency of this ReportDescriptor.

        Number of intervals that elapse between reports. -1 indicates same as numIntervals.   # noqa: E501

        :param frequency: The frequency of this ReportDescriptor.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def repeat(self) -> int:
        """Gets the repeat of this ReportDescriptor.

        Number of times to repeat report. 1 indicates generate one report. -1 indicates repeat indefinitely.   # noqa: E501

        :return: The repeat of this ReportDescriptor.
        :rtype: int
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat: int):
        """Sets the repeat of this ReportDescriptor.

        Number of times to repeat report. 1 indicates generate one report. -1 indicates repeat indefinitely.   # noqa: E501

        :param repeat: The repeat of this ReportDescriptor.
        :type repeat: int
        """

        self._repeat = repeat

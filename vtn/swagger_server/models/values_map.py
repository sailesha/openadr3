# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.any_ofvalues_map_values_items import AnyOfvaluesMapValuesItems  # noqa: F401,E501
from swagger_server import util


class ValuesMap(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, values: List[AnyOfvaluesMapValuesItems]=None):  # noqa: E501
        """ValuesMap - a model defined in Swagger

        :param type: The type of this ValuesMap.  # noqa: E501
        :type type: str
        :param values: The values of this ValuesMap.  # noqa: E501
        :type values: List[AnyOfvaluesMapValuesItems]
        """
        self.swagger_types = {
            'type': str,
            'values': List[AnyOfvaluesMapValuesItems]
        }

        self.attribute_map = {
            'type': 'type',
            'values': 'values'
        }
        self._type = type
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'ValuesMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The valuesMap of this ValuesMap.  # noqa: E501
        :rtype: ValuesMap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ValuesMap.

        Enumerated or private string signifying the nature of values. E.G. \"PRICE\" indicates value is to be interpreted as a currency.   # noqa: E501

        :return: The type of this ValuesMap.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ValuesMap.

        Enumerated or private string signifying the nature of values. E.G. \"PRICE\" indicates value is to be interpreted as a currency.   # noqa: E501

        :param type: The type of this ValuesMap.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def values(self) -> List[AnyOfvaluesMapValuesItems]:
        """Gets the values of this ValuesMap.

        A list of data points. Most often a singular value such as a price.  # noqa: E501

        :return: The values of this ValuesMap.
        :rtype: List[AnyOfvaluesMapValuesItems]
        """
        return self._values

    @values.setter
    def values(self, values: List[AnyOfvaluesMapValuesItems]):
        """Sets the values of this ValuesMap.

        A list of data points. Most often a singular value such as a price.  # noqa: E501

        :param values: The values of this ValuesMap.
        :type values: List[AnyOfvaluesMapValuesItems]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

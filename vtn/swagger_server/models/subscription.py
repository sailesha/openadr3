# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_date_time import ModelDateTime  # noqa: F401,E501
from swagger_server.models.object_id import ObjectID  # noqa: F401,E501
from swagger_server.models.subscription_object_operations import SubscriptionObjectOperations  # noqa: F401,E501
from swagger_server.models.values_map import ValuesMap  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: ObjectID=None, created_date_time: ModelDateTime=None, modification_date_time: ModelDateTime=None, object_type: str=None, client_name: str=None, program_id: ObjectID=None, object_operations: List[SubscriptionObjectOperations]=None, targets: List[ValuesMap]=None):  # noqa: E501
        """Subscription - a model defined in Swagger

        :param id: The id of this Subscription.  # noqa: E501
        :type id: ObjectID
        :param created_date_time: The created_date_time of this Subscription.  # noqa: E501
        :type created_date_time: ModelDateTime
        :param modification_date_time: The modification_date_time of this Subscription.  # noqa: E501
        :type modification_date_time: ModelDateTime
        :param object_type: The object_type of this Subscription.  # noqa: E501
        :type object_type: str
        :param client_name: The client_name of this Subscription.  # noqa: E501
        :type client_name: str
        :param program_id: The program_id of this Subscription.  # noqa: E501
        :type program_id: ObjectID
        :param object_operations: The object_operations of this Subscription.  # noqa: E501
        :type object_operations: List[SubscriptionObjectOperations]
        :param targets: The targets of this Subscription.  # noqa: E501
        :type targets: List[ValuesMap]
        """
        self.swagger_types = {
            'id': ObjectID,
            'created_date_time': ModelDateTime,
            'modification_date_time': ModelDateTime,
            'object_type': str,
            'client_name': str,
            'program_id': ObjectID,
            'object_operations': List[SubscriptionObjectOperations],
            'targets': List[ValuesMap]
        }

        self.attribute_map = {
            'id': 'id',
            'created_date_time': 'createdDateTime',
            'modification_date_time': 'modificationDateTime',
            'object_type': 'objectType',
            'client_name': 'clientName',
            'program_id': 'programID',
            'object_operations': 'objectOperations',
            'targets': 'targets'
        }
        self._id = id
        self._created_date_time = created_date_time
        self._modification_date_time = modification_date_time
        self._object_type = object_type
        self._client_name = client_name
        self._program_id = program_id
        self._object_operations = object_operations
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The subscription of this Subscription.  # noqa: E501
        :rtype: Subscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> ObjectID:
        """Gets the id of this Subscription.


        :return: The id of this Subscription.
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id: ObjectID):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.
        :type id: ObjectID
        """

        self._id = id

    @property
    def created_date_time(self) -> ModelDateTime:
        """Gets the created_date_time of this Subscription.


        :return: The created_date_time of this Subscription.
        :rtype: ModelDateTime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time: ModelDateTime):
        """Sets the created_date_time of this Subscription.


        :param created_date_time: The created_date_time of this Subscription.
        :type created_date_time: ModelDateTime
        """

        self._created_date_time = created_date_time

    @property
    def modification_date_time(self) -> ModelDateTime:
        """Gets the modification_date_time of this Subscription.


        :return: The modification_date_time of this Subscription.
        :rtype: ModelDateTime
        """
        return self._modification_date_time

    @modification_date_time.setter
    def modification_date_time(self, modification_date_time: ModelDateTime):
        """Sets the modification_date_time of this Subscription.


        :param modification_date_time: The modification_date_time of this Subscription.
        :type modification_date_time: ModelDateTime
        """

        self._modification_date_time = modification_date_time

    @property
    def object_type(self) -> str:
        """Gets the object_type of this Subscription.

        Used as discriminator.  # noqa: E501

        :return: The object_type of this Subscription.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type: str):
        """Sets the object_type of this Subscription.

        Used as discriminator.  # noqa: E501

        :param object_type: The object_type of this Subscription.
        :type object_type: str
        """
        allowed_values = ["SUBSCRIPTION"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def client_name(self) -> str:
        """Gets the client_name of this Subscription.

        User generated identifier, may be VEN identifier provisioned out-of-band.  # noqa: E501

        :return: The client_name of this Subscription.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name: str):
        """Sets the client_name of this Subscription.

        User generated identifier, may be VEN identifier provisioned out-of-band.  # noqa: E501

        :param client_name: The client_name of this Subscription.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")  # noqa: E501

        self._client_name = client_name

    @property
    def program_id(self) -> ObjectID:
        """Gets the program_id of this Subscription.


        :return: The program_id of this Subscription.
        :rtype: ObjectID
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id: ObjectID):
        """Sets the program_id of this Subscription.


        :param program_id: The program_id of this Subscription.
        :type program_id: ObjectID
        """
        if program_id is None:
            raise ValueError("Invalid value for `program_id`, must not be `None`")  # noqa: E501

        self._program_id = program_id

    @property
    def object_operations(self) -> List[SubscriptionObjectOperations]:
        """Gets the object_operations of this Subscription.

        list of objects and operations to subscribe to.  # noqa: E501

        :return: The object_operations of this Subscription.
        :rtype: List[SubscriptionObjectOperations]
        """
        return self._object_operations

    @object_operations.setter
    def object_operations(self, object_operations: List[SubscriptionObjectOperations]):
        """Sets the object_operations of this Subscription.

        list of objects and operations to subscribe to.  # noqa: E501

        :param object_operations: The object_operations of this Subscription.
        :type object_operations: List[SubscriptionObjectOperations]
        """
        if object_operations is None:
            raise ValueError("Invalid value for `object_operations`, must not be `None`")  # noqa: E501

        self._object_operations = object_operations

    @property
    def targets(self) -> List[ValuesMap]:
        """Gets the targets of this Subscription.

        A list of valuesMap objects. Used by server to filter callbacks.  # noqa: E501

        :return: The targets of this Subscription.
        :rtype: List[ValuesMap]
        """
        return self._targets

    @targets.setter
    def targets(self, targets: List[ValuesMap]):
        """Sets the targets of this Subscription.

        A list of valuesMap objects. Used by server to filter callbacks.  # noqa: E501

        :param targets: The targets of this Subscription.
        :type targets: List[ValuesMap]
        """

        self._targets = targets

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.event_payload_descriptor import EventPayloadDescriptor  # noqa: F401,E501
from swagger_server.models.interval import Interval  # noqa: F401,E501
from swagger_server.models.interval_period import IntervalPeriod  # noqa: F401,E501
from swagger_server.models.model_date_time import ModelDateTime  # noqa: F401,E501
from swagger_server.models.object_id import ObjectID  # noqa: F401,E501
from swagger_server.models.report_descriptor import ReportDescriptor  # noqa: F401,E501
from swagger_server.models.values_map import ValuesMap  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: ObjectID=None, created_date_time: ModelDateTime=None, modification_date_time: ModelDateTime=None, object_type: str=None, program_id: ObjectID=None, event_name: str=None, priority: int=None, targets: List[ValuesMap]=None, report_descriptors: List[ReportDescriptor]=None, payload_descriptors: List[EventPayloadDescriptor]=None, interval_period: IntervalPeriod=None, intervals: List[Interval]=None):  # noqa: E501
        """Event - a model defined in Swagger

        :param id: The id of this Event.  # noqa: E501
        :type id: ObjectID
        :param created_date_time: The created_date_time of this Event.  # noqa: E501
        :type created_date_time: ModelDateTime
        :param modification_date_time: The modification_date_time of this Event.  # noqa: E501
        :type modification_date_time: ModelDateTime
        :param object_type: The object_type of this Event.  # noqa: E501
        :type object_type: str
        :param program_id: The program_id of this Event.  # noqa: E501
        :type program_id: ObjectID
        :param event_name: The event_name of this Event.  # noqa: E501
        :type event_name: str
        :param priority: The priority of this Event.  # noqa: E501
        :type priority: int
        :param targets: The targets of this Event.  # noqa: E501
        :type targets: List[ValuesMap]
        :param report_descriptors: The report_descriptors of this Event.  # noqa: E501
        :type report_descriptors: List[ReportDescriptor]
        :param payload_descriptors: The payload_descriptors of this Event.  # noqa: E501
        :type payload_descriptors: List[EventPayloadDescriptor]
        :param interval_period: The interval_period of this Event.  # noqa: E501
        :type interval_period: IntervalPeriod
        :param intervals: The intervals of this Event.  # noqa: E501
        :type intervals: List[Interval]
        """
        self.swagger_types = {
            'id': ObjectID,
            'created_date_time': ModelDateTime,
            'modification_date_time': ModelDateTime,
            'object_type': str,
            'program_id': ObjectID,
            'event_name': str,
            'priority': int,
            'targets': List[ValuesMap],
            'report_descriptors': List[ReportDescriptor],
            'payload_descriptors': List[EventPayloadDescriptor],
            'interval_period': IntervalPeriod,
            'intervals': List[Interval]
        }

        self.attribute_map = {
            'id': 'id',
            'created_date_time': 'createdDateTime',
            'modification_date_time': 'modificationDateTime',
            'object_type': 'objectType',
            'program_id': 'programID',
            'event_name': 'eventName',
            'priority': 'priority',
            'targets': 'targets',
            'report_descriptors': 'reportDescriptors',
            'payload_descriptors': 'payloadDescriptors',
            'interval_period': 'intervalPeriod',
            'intervals': 'intervals'
        }
        self._id = id
        self._created_date_time = created_date_time
        self._modification_date_time = modification_date_time
        self._object_type = object_type
        self._program_id = program_id
        self._event_name = event_name
        self._priority = priority
        self._targets = targets
        self._report_descriptors = report_descriptors
        self._payload_descriptors = payload_descriptors
        self._interval_period = interval_period
        self._intervals = intervals

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> ObjectID:
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id: ObjectID):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: ObjectID
        """

        self._id = id

    @property
    def created_date_time(self) -> ModelDateTime:
        """Gets the created_date_time of this Event.


        :return: The created_date_time of this Event.
        :rtype: ModelDateTime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time: ModelDateTime):
        """Sets the created_date_time of this Event.


        :param created_date_time: The created_date_time of this Event.
        :type created_date_time: ModelDateTime
        """

        self._created_date_time = created_date_time

    @property
    def modification_date_time(self) -> ModelDateTime:
        """Gets the modification_date_time of this Event.


        :return: The modification_date_time of this Event.
        :rtype: ModelDateTime
        """
        return self._modification_date_time

    @modification_date_time.setter
    def modification_date_time(self, modification_date_time: ModelDateTime):
        """Sets the modification_date_time of this Event.


        :param modification_date_time: The modification_date_time of this Event.
        :type modification_date_time: ModelDateTime
        """

        self._modification_date_time = modification_date_time

    @property
    def object_type(self) -> str:
        """Gets the object_type of this Event.

        Used as discriminator  # noqa: E501

        :return: The object_type of this Event.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type: str):
        """Sets the object_type of this Event.

        Used as discriminator  # noqa: E501

        :param object_type: The object_type of this Event.
        :type object_type: str
        """
        allowed_values = ["EVENT"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def program_id(self) -> ObjectID:
        """Gets the program_id of this Event.


        :return: The program_id of this Event.
        :rtype: ObjectID
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id: ObjectID):
        """Sets the program_id of this Event.


        :param program_id: The program_id of this Event.
        :type program_id: ObjectID
        """
        if program_id is None:
            raise ValueError("Invalid value for `program_id`, must not be `None`")  # noqa: E501

        self._program_id = program_id

    @property
    def event_name(self) -> str:
        """Gets the event_name of this Event.

        User defined string for use in debugging or User Interface.  # noqa: E501

        :return: The event_name of this Event.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name: str):
        """Sets the event_name of this Event.

        User defined string for use in debugging or User Interface.  # noqa: E501

        :param event_name: The event_name of this Event.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def priority(self) -> int:
        """Gets the priority of this Event.

        Relative priority of event. A lower number is a higher priority.  # noqa: E501

        :return: The priority of this Event.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority: int):
        """Sets the priority of this Event.

        Relative priority of event. A lower number is a higher priority.  # noqa: E501

        :param priority: The priority of this Event.
        :type priority: int
        """

        self._priority = priority

    @property
    def targets(self) -> List[ValuesMap]:
        """Gets the targets of this Event.

        A list of valuesMap objects.  # noqa: E501

        :return: The targets of this Event.
        :rtype: List[ValuesMap]
        """
        return self._targets

    @targets.setter
    def targets(self, targets: List[ValuesMap]):
        """Sets the targets of this Event.

        A list of valuesMap objects.  # noqa: E501

        :param targets: The targets of this Event.
        :type targets: List[ValuesMap]
        """

        self._targets = targets

    @property
    def report_descriptors(self) -> List[ReportDescriptor]:
        """Gets the report_descriptors of this Event.

        A list of reportDescriptor objects. Used to request reports from VEN.  # noqa: E501

        :return: The report_descriptors of this Event.
        :rtype: List[ReportDescriptor]
        """
        return self._report_descriptors

    @report_descriptors.setter
    def report_descriptors(self, report_descriptors: List[ReportDescriptor]):
        """Sets the report_descriptors of this Event.

        A list of reportDescriptor objects. Used to request reports from VEN.  # noqa: E501

        :param report_descriptors: The report_descriptors of this Event.
        :type report_descriptors: List[ReportDescriptor]
        """

        self._report_descriptors = report_descriptors

    @property
    def payload_descriptors(self) -> List[EventPayloadDescriptor]:
        """Gets the payload_descriptors of this Event.

        A list of payloadDescriptor objects.  # noqa: E501

        :return: The payload_descriptors of this Event.
        :rtype: List[EventPayloadDescriptor]
        """
        return self._payload_descriptors

    @payload_descriptors.setter
    def payload_descriptors(self, payload_descriptors: List[EventPayloadDescriptor]):
        """Sets the payload_descriptors of this Event.

        A list of payloadDescriptor objects.  # noqa: E501

        :param payload_descriptors: The payload_descriptors of this Event.
        :type payload_descriptors: List[EventPayloadDescriptor]
        """

        self._payload_descriptors = payload_descriptors

    @property
    def interval_period(self) -> IntervalPeriod:
        """Gets the interval_period of this Event.


        :return: The interval_period of this Event.
        :rtype: IntervalPeriod
        """
        return self._interval_period

    @interval_period.setter
    def interval_period(self, interval_period: IntervalPeriod):
        """Sets the interval_period of this Event.


        :param interval_period: The interval_period of this Event.
        :type interval_period: IntervalPeriod
        """

        self._interval_period = interval_period

    @property
    def intervals(self) -> List[Interval]:
        """Gets the intervals of this Event.

        A list of interval objects.  # noqa: E501

        :return: The intervals of this Event.
        :rtype: List[Interval]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals: List[Interval]):
        """Sets the intervals of this Event.

        A list of interval objects.  # noqa: E501

        :param intervals: The intervals of this Event.
        :type intervals: List[Interval]
        """
        if intervals is None:
            raise ValueError("Invalid value for `intervals`, must not be `None`")  # noqa: E501

        self._intervals = intervals

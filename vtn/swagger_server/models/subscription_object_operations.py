# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object_types import ObjectTypes  # noqa: F401,E501
from swagger_server import util


class SubscriptionObjectOperations(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, objects: List[ObjectTypes]=None, operations: List[str]=None, callback_url: str=None, bearer_token: str=None):  # noqa: E501
        """SubscriptionObjectOperations - a model defined in Swagger

        :param objects: The objects of this SubscriptionObjectOperations.  # noqa: E501
        :type objects: List[ObjectTypes]
        :param operations: The operations of this SubscriptionObjectOperations.  # noqa: E501
        :type operations: List[str]
        :param callback_url: The callback_url of this SubscriptionObjectOperations.  # noqa: E501
        :type callback_url: str
        :param bearer_token: The bearer_token of this SubscriptionObjectOperations.  # noqa: E501
        :type bearer_token: str
        """
        self.swagger_types = {
            'objects': List[ObjectTypes],
            'operations': List[str],
            'callback_url': str,
            'bearer_token': str
        }

        self.attribute_map = {
            'objects': 'objects',
            'operations': 'operations',
            'callback_url': 'callbackUrl',
            'bearer_token': 'bearerToken'
        }
        self._objects = objects
        self._operations = operations
        self._callback_url = callback_url
        self._bearer_token = bearer_token

    @classmethod
    def from_dict(cls, dikt) -> 'SubscriptionObjectOperations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The subscription_objectOperations of this SubscriptionObjectOperations.  # noqa: E501
        :rtype: SubscriptionObjectOperations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def objects(self) -> List[ObjectTypes]:
        """Gets the objects of this SubscriptionObjectOperations.

        list of objects to subscribe to.  # noqa: E501

        :return: The objects of this SubscriptionObjectOperations.
        :rtype: List[ObjectTypes]
        """
        return self._objects

    @objects.setter
    def objects(self, objects: List[ObjectTypes]):
        """Sets the objects of this SubscriptionObjectOperations.

        list of objects to subscribe to.  # noqa: E501

        :param objects: The objects of this SubscriptionObjectOperations.
        :type objects: List[ObjectTypes]
        """
        if objects is None:
            raise ValueError("Invalid value for `objects`, must not be `None`")  # noqa: E501

        self._objects = objects

    @property
    def operations(self) -> List[str]:
        """Gets the operations of this SubscriptionObjectOperations.

        list of operations to subscribe to.  # noqa: E501

        :return: The operations of this SubscriptionObjectOperations.
        :rtype: List[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations: List[str]):
        """Sets the operations of this SubscriptionObjectOperations.

        list of operations to subscribe to.  # noqa: E501

        :param operations: The operations of this SubscriptionObjectOperations.
        :type operations: List[str]
        """
        allowed_values = ["GET", "POST", "PUT", "DELETE"]  # noqa: E501
        if not set(operations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `operations` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(operations) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._operations = operations

    @property
    def callback_url(self) -> str:
        """Gets the callback_url of this SubscriptionObjectOperations.

        User provided webhook URL.  # noqa: E501

        :return: The callback_url of this SubscriptionObjectOperations.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url: str):
        """Sets the callback_url of this SubscriptionObjectOperations.

        User provided webhook URL.  # noqa: E501

        :param callback_url: The callback_url of this SubscriptionObjectOperations.
        :type callback_url: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501

        self._callback_url = callback_url

    @property
    def bearer_token(self) -> str:
        """Gets the bearer_token of this SubscriptionObjectOperations.

        User provided token. To avoid custom integrations, callback endpoints should accept the provided bearer token to authenticate VTN requests.   # noqa: E501

        :return: The bearer_token of this SubscriptionObjectOperations.
        :rtype: str
        """
        return self._bearer_token

    @bearer_token.setter
    def bearer_token(self, bearer_token: str):
        """Sets the bearer_token of this SubscriptionObjectOperations.

        User provided token. To avoid custom integrations, callback endpoints should accept the provided bearer token to authenticate VTN requests.   # noqa: E501

        :param bearer_token: The bearer_token of this SubscriptionObjectOperations.
        :type bearer_token: str
        """

        self._bearer_token = bearer_token

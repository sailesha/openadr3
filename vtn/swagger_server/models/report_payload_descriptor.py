# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ReportPayloadDescriptor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, object_type: str=None, payload_type: str=None, reading_type: str=None, units: str=None, accuracy: float=None, confidence: int=None):  # noqa: E501
        """ReportPayloadDescriptor - a model defined in Swagger

        :param object_type: The object_type of this ReportPayloadDescriptor.  # noqa: E501
        :type object_type: str
        :param payload_type: The payload_type of this ReportPayloadDescriptor.  # noqa: E501
        :type payload_type: str
        :param reading_type: The reading_type of this ReportPayloadDescriptor.  # noqa: E501
        :type reading_type: str
        :param units: The units of this ReportPayloadDescriptor.  # noqa: E501
        :type units: str
        :param accuracy: The accuracy of this ReportPayloadDescriptor.  # noqa: E501
        :type accuracy: float
        :param confidence: The confidence of this ReportPayloadDescriptor.  # noqa: E501
        :type confidence: int
        """
        self.swagger_types = {
            'object_type': str,
            'payload_type': str,
            'reading_type': str,
            'units': str,
            'accuracy': float,
            'confidence': int
        }

        self.attribute_map = {
            'object_type': 'objectType',
            'payload_type': 'payloadType',
            'reading_type': 'readingType',
            'units': 'units',
            'accuracy': 'accuracy',
            'confidence': 'confidence'
        }
        self._object_type = object_type
        self._payload_type = payload_type
        self._reading_type = reading_type
        self._units = units
        self._accuracy = accuracy
        self._confidence = confidence

    @classmethod
    def from_dict(cls, dikt) -> 'ReportPayloadDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The reportPayloadDescriptor of this ReportPayloadDescriptor.  # noqa: E501
        :rtype: ReportPayloadDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_type(self) -> str:
        """Gets the object_type of this ReportPayloadDescriptor.

        Used as discriminator.  # noqa: E501

        :return: The object_type of this ReportPayloadDescriptor.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type: str):
        """Sets the object_type of this ReportPayloadDescriptor.

        Used as discriminator.  # noqa: E501

        :param object_type: The object_type of this ReportPayloadDescriptor.
        :type object_type: str
        """
        allowed_values = ["REPORT_PAYLOAD_DESCRIPTOR"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def payload_type(self) -> str:
        """Gets the payload_type of this ReportPayloadDescriptor.

        Enumerated or private string signifying the nature of values.  # noqa: E501

        :return: The payload_type of this ReportPayloadDescriptor.
        :rtype: str
        """
        return self._payload_type

    @payload_type.setter
    def payload_type(self, payload_type: str):
        """Sets the payload_type of this ReportPayloadDescriptor.

        Enumerated or private string signifying the nature of values.  # noqa: E501

        :param payload_type: The payload_type of this ReportPayloadDescriptor.
        :type payload_type: str
        """
        if payload_type is None:
            raise ValueError("Invalid value for `payload_type`, must not be `None`")  # noqa: E501

        self._payload_type = payload_type

    @property
    def reading_type(self) -> str:
        """Gets the reading_type of this ReportPayloadDescriptor.

        Enumerated or private string signifying the type of reading.  # noqa: E501

        :return: The reading_type of this ReportPayloadDescriptor.
        :rtype: str
        """
        return self._reading_type

    @reading_type.setter
    def reading_type(self, reading_type: str):
        """Sets the reading_type of this ReportPayloadDescriptor.

        Enumerated or private string signifying the type of reading.  # noqa: E501

        :param reading_type: The reading_type of this ReportPayloadDescriptor.
        :type reading_type: str
        """

        self._reading_type = reading_type

    @property
    def units(self) -> str:
        """Gets the units of this ReportPayloadDescriptor.

        Units of measure.  # noqa: E501

        :return: The units of this ReportPayloadDescriptor.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units: str):
        """Sets the units of this ReportPayloadDescriptor.

        Units of measure.  # noqa: E501

        :param units: The units of this ReportPayloadDescriptor.
        :type units: str
        """

        self._units = units

    @property
    def accuracy(self) -> float:
        """Gets the accuracy of this ReportPayloadDescriptor.

        A quantification of the accuracy of a set of payload values.  # noqa: E501

        :return: The accuracy of this ReportPayloadDescriptor.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy: float):
        """Sets the accuracy of this ReportPayloadDescriptor.

        A quantification of the accuracy of a set of payload values.  # noqa: E501

        :param accuracy: The accuracy of this ReportPayloadDescriptor.
        :type accuracy: float
        """

        self._accuracy = accuracy

    @property
    def confidence(self) -> int:
        """Gets the confidence of this ReportPayloadDescriptor.

        A quantification of the confidence in a set of payload values.  # noqa: E501

        :return: The confidence of this ReportPayloadDescriptor.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: int):
        """Sets the confidence of this ReportPayloadDescriptor.

        A quantification of the confidence in a set of payload values.  # noqa: E501

        :param confidence: The confidence of this ReportPayloadDescriptor.
        :type confidence: int
        """

        self._confidence = confidence

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.interval_period import IntervalPeriod  # noqa: F401,E501
from swagger_server.models.values_map import ValuesMap  # noqa: F401,E501
from swagger_server import util


class Interval(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, interval_period: IntervalPeriod=None, payloads: List[ValuesMap]=None):  # noqa: E501
        """Interval - a model defined in Swagger

        :param id: The id of this Interval.  # noqa: E501
        :type id: int
        :param interval_period: The interval_period of this Interval.  # noqa: E501
        :type interval_period: IntervalPeriod
        :param payloads: The payloads of this Interval.  # noqa: E501
        :type payloads: List[ValuesMap]
        """
        self.swagger_types = {
            'id': int,
            'interval_period': IntervalPeriod,
            'payloads': List[ValuesMap]
        }

        self.attribute_map = {
            'id': 'id',
            'interval_period': 'intervalPeriod',
            'payloads': 'payloads'
        }
        self._id = id
        self._interval_period = interval_period
        self._payloads = payloads

    @classmethod
    def from_dict(cls, dikt) -> 'Interval':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The interval of this Interval.  # noqa: E501
        :rtype: Interval
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Interval.

        A client generated number assigned an interval object. Not a sequence number.  # noqa: E501

        :return: The id of this Interval.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Interval.

        A client generated number assigned an interval object. Not a sequence number.  # noqa: E501

        :param id: The id of this Interval.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def interval_period(self) -> IntervalPeriod:
        """Gets the interval_period of this Interval.


        :return: The interval_period of this Interval.
        :rtype: IntervalPeriod
        """
        return self._interval_period

    @interval_period.setter
    def interval_period(self, interval_period: IntervalPeriod):
        """Sets the interval_period of this Interval.


        :param interval_period: The interval_period of this Interval.
        :type interval_period: IntervalPeriod
        """

        self._interval_period = interval_period

    @property
    def payloads(self) -> List[ValuesMap]:
        """Gets the payloads of this Interval.

        A list of valuesMap objects.  # noqa: E501

        :return: The payloads of this Interval.
        :rtype: List[ValuesMap]
        """
        return self._payloads

    @payloads.setter
    def payloads(self, payloads: List[ValuesMap]):
        """Sets the payloads of this Interval.

        A list of valuesMap objects.  # noqa: E501

        :param payloads: The payloads of this Interval.
        :type payloads: List[ValuesMap]
        """
        if payloads is None:
            raise ValueError("Invalid value for `payloads`, must not be `None`")  # noqa: E501

        self._payloads = payloads
